{"ast":null,"code":"import _classCallCheck from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart as _fetchCollectionsStart } from '../../redux/shop/shop.actions.js';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport Spinner from '../../components/Spinner/spinner.component.jsx';\nimport './shop.styles.scss';\n\nvar ShopPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(ShopPage, _React$Component);\n\n  var _super = _createSuper(ShopPage);\n\n  function ShopPage() {\n    _classCallCheck(this, ShopPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ShopPage, [{\n    key: \"componentDidMount\",\n    //this whole section is moved to it's own reducer\n    // just an easier way to write state\n    // state = {\n    //     loading: true \n    // };\n    // unsubscribeFromSnapshot = null;\n    value: function componentDidMount() {\n      var fetchCollectionsStart = this.props.fetchCollectionsStart;\n      fetchCollectionsStart(); //fetchCollectionsStartAsync();\n      //const { updateCollections } = this.props;\n      // const collectionRef = firestore.collection('collection');\n      // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n      //  collectionRef.get().then(snapshot => {\n      //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n      //     updateCollections(collectionsMap);\n      //     this.setState({ loading: false });\n      // });\n      // RXjs way :\n      // collectionRef.onSnapshot(async snapshot => {\n      //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n      //     updateCollections(collectionsMap);\n      //     this.setState({ loading: false });\n      // });\n      //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n      // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n      // .then(response => response.json())\n      // .then(collections => console.log(collections));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      try {\n        var match = this.props.match;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"shop-page\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Route, {\n          exact: true,\n          path: \"\".concat(match.path),\n          component: CollectionsOverviewContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Route, {\n          path: \"\".concat(match.path, \"/:collectionId\"),\n          component: CollectionPageContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }\n        }));\n      } catch (_unused) {\n        return /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }\n        });\n      }\n    }\n  }]);\n\n  return ShopPage;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchCollectionsStart: function fetchCollectionsStart() {\n      return dispatch(_fetchCollectionsStart());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollectionsStart","CollectionsOverviewContainer","CollectionPageContainer","Spinner","ShopPage","props","match","path","Component","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,qBAAqB,IAArBA,sBAAT,QAAsC,kCAAtC;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,OAAP,MAAoB,gDAApB;AAEA,OAAO,oBAAP;;IAMMC,Q;;;;;;;;;;;;;AAEF;AACA;AACA;AACA;AACA;AAEA;wCAEmB;AAAA,UACPJ,qBADO,GACmB,KAAKK,KADxB,CACPL,qBADO;AAEfA,MAAAA,qBAAqB,GAFN,CAGf;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGH;;;6BAEQ;AAEL,UAAI;AAAA,YACQM,KADR,GACkB,KAAKD,KADvB,CACQC,KADR;AAEA,4BACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,KAAD;AACI,UAAA,KAAK,MADT;AAEI,UAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAFR;AAGI,UAAA,SAAS,EAAEN,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAMI,oBAAC,KAAD;AACI,UAAA,IAAI,YAAKK,KAAK,CAACC,IAAX,mBADR;AAEI,UAAA,SAAS,EAAEL,uBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANJ,CADJ;AAaH,OAfD,CAeE,gBAAM;AACJ,4BACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AAEJ;;;;EAhEkBL,KAAK,CAACW,S;;AAmE7B,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACpCV,IAAAA,qBAAqB,EAAE;AAAA,aAAMU,QAAQ,CAACV,sBAAqB,EAAtB,CAAd;AAAA;AADa,GAAL;AAAA,CAAnC;;AAKA,eAAeD,OAAO,CAAC,IAAD,EAAOU,kBAAP,CAAP,CAAkCL,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions.js';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport Spinner from '../../components/Spinner/spinner.component.jsx';\n\nimport './shop.styles.scss';\n\n\n\n\n\nclass ShopPage extends React.Component {\n\n    //this whole section is moved to it's own reducer\n    // just an easier way to write state\n    // state = {\n    //     loading: true \n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const { fetchCollectionsStart } = this.props;\n        fetchCollectionsStart();\n        //fetchCollectionsStartAsync();\n        \n        //const { updateCollections } = this.props;\n        // const collectionRef = firestore.collection('collection');\n\n        // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n        //  collectionRef.get().then(snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n        // RXjs way :\n        // collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n\n        //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n        // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections));\n\n\n    }\n\n    render() {\n\n        try {\n            const { match } = this.props;\n            return(\n                <div className='shop-page'>\n                    <Route\n                        exact\n                        path={`${match.path}`} \n                        component={CollectionsOverviewContainer}\n                    />\n                    <Route\n                        path={`${match.path}/:collectionId`}\n                        component={CollectionPageContainer}\n                    />\n                </div>\n            );\n        } catch {\n            return (\n                <Spinner />\n            )\n        }\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n})\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}