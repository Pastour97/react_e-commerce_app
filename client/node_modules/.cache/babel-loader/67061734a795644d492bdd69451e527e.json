{"ast":null,"code":"var _jsxFileName = \"/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync as _fetchCollectionsStartAsync } from '../../redux/shop/shop.actions.js';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport './shop.styles.scss';\n\nclass ShopPage extends React.Component {\n  //this whole section is moved to it's own reducer\n  // just an easier way to write state\n  // state = {\n  //     loading: true \n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync(); //const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collection');\n    // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n    //  collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    // RXjs way :\n    // collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n    // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n  }\n\n  render() {\n    const match = this.props.match;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      component: CollectionsOverviewContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      component: CollectionPageContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(_fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollectionsStartAsync","CollectionsOverviewContainer","CollectionPageContainer","ShopPage","Component","componentDidMount","props","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,0BAA0B,IAA1BA,2BAAT,QAA2C,kCAA3C;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,OAAO,oBAAP;;AAKA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAEnC;AACA;AACA;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAE;AAAA,UACPL,0BADO,GACwB,KAAKM,KAD7B,CACPN,0BADO;AAEfA,IAAAA,0BAA0B,GAFX,CAIf;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGH;;AAEDO,EAAAA,MAAM,GAAG;AAAA,UACGC,KADH,GACa,KAAKF,KADlB,CACGE,KADH;AAEL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAFR;AAGI,MAAA,SAAS,EAAER,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAMI,oBAAC,KAAD;AACI,MAAA,IAAI,YAAKO,KAAK,CAACC,IAAX,mBADR;AAEI,MAAA,SAAS,EAAEP,uBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAaH;;AAvDkC;;AA0DvC,MAAMQ,kBAAkB,GAAGC,QAAQ,KAAK;AACpCX,EAAAA,0BAA0B,EAAE,MAAMW,QAAQ,CAACX,2BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAKA,eAAeD,OAAO,CAAC,IAAD,EAAOW,kBAAP,CAAP,CAAkCP,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions.js';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\n\nimport './shop.styles.scss';\n\n\n\n\nclass ShopPage extends React.Component {\n\n    //this whole section is moved to it's own reducer\n    // just an easier way to write state\n    // state = {\n    //     loading: true \n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync();\n        \n        //const { updateCollections } = this.props;\n        // const collectionRef = firestore.collection('collection');\n\n        // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n        //  collectionRef.get().then(snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n        // RXjs way :\n        // collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n\n        //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n        // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections));\n\n\n    }\n\n    render() {\n        const { match } = this.props;\n        return(\n            <div className='shop-page'>\n                <Route\n                    exact\n                    path={`${match.path}`} \n                    component={CollectionsOverviewContainer}\n                />\n                <Route\n                    path={`${match.path}/:collectionId`}\n                    component={CollectionPageContainer}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n})\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}