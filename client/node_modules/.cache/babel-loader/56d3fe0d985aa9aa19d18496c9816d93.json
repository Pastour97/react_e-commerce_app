{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onfetchCollectionsStart),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(shopSagas);\n\nimport { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collectionRef = firestore.collection('collection'); //why can't the commented code work instead of the above one\n          //const collectionRef = yield call(firestore.collection, 'collection');\n\n          _context.next = 4;\n          return collectionRef.get();\n\n        case 4:\n          snapshot = _context.sent;\n          _context.next = 7;\n          return call(convertCollectionsSnapShotToMap, snapshot);\n\n        case 7:\n          collectionsMap = _context.sent;\n\n          if (!Object.keys(collectionsMap).length) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 11;\n          return put(fetchCollectionsSuccess(collectionsMap));\n\n        case 11:\n          _context.next = 14;\n          break;\n\n        case 13:\n          throw new Error(\"nothing got back, maybe it's a vpn problem\");\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 20;\n          return put(fetchCollectionsFailure(_context.t0.message));\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 16]]);\n}\n;\nexport function onfetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function onfetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function shopSagas() {\n  return _regeneratorRuntime.wrap(function shopSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onfetchCollectionsStart)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","onfetchCollectionsStart","shopSagas","takeLatest","call","put","all","firestore","convertCollectionsSnapShotToMap","fetchCollectionsFailure","fetchCollectionsSuccess","ShopActionTypes","collectionRef","collection","get","snapshot","collectionsMap","Object","keys","length","Error","message","FETCH_COLLECTIONS_START"],"mappings":";;oDAiBiBA,qB;qDAgCAC,uB;qDAOAC,S;;AAxDjB,SACIC,UADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,GAJJ,QAKO,oBALP;AAOA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAGA,OAAO,SAAUX,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOY,UAAAA,aAFP,GAEuBL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAFvB,EAGC;AACA;;AAJD;AAKkB,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AALlB;AAKOC,UAAAA,QALP;AAAA;AAMwB,iBAAMX,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAV;;AANxB;AAMOC,UAAAA,cANP;;AAAA,eAOKC,MAAM,CAACC,IAAP,CAAYF,cAAZ,EAA4BG,MAPjC;AAAA;AAAA;AAAA;;AAAA;AAQK,iBAAMd,GAAG,CAACK,uBAAuB,CAACM,cAAD,CAAxB,CAAT;;AARL;AAAA;AAAA;;AAAA;AAAA,gBAUW,IAAII,KAAJ,CAAU,4CAAV,CAVX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaC,iBAAMf,GAAG,CAACI,uBAAuB,CAAC,YAAMY,OAAP,CAAxB,CAAT;;AAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BN;AAGD,OAAO,SAAUpB,uBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAME,UAAU,CACZQ,eAAe,CAACW,uBADJ,EAEZtB,qBAFY,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,GAAG,CAAC,CAACF,IAAI,CAACH,uBAAD,CAAL,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { \n    takeLatest,\n    call,\n    put,\n    all,\n} from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\n\nimport { \n    fetchCollectionsFailure,\n    fetchCollectionsSuccess,\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\n\nexport function* fetchCollectionsAsync() {\n    try {\n        const collectionRef = firestore.collection('collection');\n        //why can't the commented code work instead of the above one\n        //const collectionRef = yield call(firestore.collection, 'collection');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionsSnapShotToMap, snapshot);\n        if (Object.keys(collectionsMap).length) {\n            yield put(fetchCollectionsSuccess(collectionsMap));\n        } else {\n            throw new Error(\"nothing got back, maybe it's a vpn problem\");\n        }\n        }  catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n    \n    // the above code is exactly the same as this one which we wrote in our redux thunk\n    // collectionRef\n    //     .get()\n    //     .then(snapshot => {\n    //         const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //         //used to be:\n    //         //updateCollections(collectionsMap);\n    //         dispatch(fetchCollectionsSuccess(collectionsMap));\n    //         //this part is removed to since we aren't in a component\n    //         //this.setState({ loading: false });\n    //     })\n    //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n};\n\n\nexport function* onfetchCollectionsStart() {\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n} \n\nexport function* shopSagas() {\n    yield all([call(onfetchCollectionsStart)])\n}"]},"metadata":{},"sourceType":"module"}