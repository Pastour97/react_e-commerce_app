{"ast":null,"code":"var _jsxFileName = \"/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { fetchCollectionsStartAsync as _fetchCollectionsStartAsync } from '../../redux/shop/shop.actions.js';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport './shop.styles.scss';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  //this whole section is moved to it's own reducer\n  // just an easier way to write state\n  // state = {\n  //     loading: true \n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync(); //const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collection');\n    // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n    //  collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    // RXjs way :\n    // collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n    // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n  }\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionFetching = _this$props.isCollectionFetching,\n          isCollectionsLoaded = _this$props.isCollectionsLoaded;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: !isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(_fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverview","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,0BAA0B,IAA1BA,2BAAT,QAA2C,kCAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,oBAAP;AAGA,MAAMC,8BAA8B,GAAGH,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAEnC;AACA;AACA;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAE;AAAA,UACPV,0BADO,GACwB,KAAKW,KAD7B,CACPX,0BADO;AAEfA,IAAAA,0BAA0B,GAFX,CAIf;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGH;;AAEDY,EAAAA,MAAM,GAAG;AAAA,wBACwD,KAAKD,KAD7D;AAAA,UACGE,KADH,eACGA,KADH;AAAA,UACUC,oBADV,eACUA,oBADV;AAAA,UACgCC,mBADhC,eACgCA,mBADhC;AAEL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,YAAKF,KAAK,CAACG,IAAX,CAFR;AAGI,MAAA,MAAM,EAAGL,KAAD,iBACJ,oBAAC,8BAAD;AACI,QAAA,SAAS,EAAE,CAACG;AADhB,SAEQH,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAWI,oBAAC,KAAD;AACI,MAAA,IAAI,YAAKE,KAAK,CAACG,IAAX,mBADR;AAEI,MAAA,MAAM,EAAGL,KAAD,iBACJ,oBAAC,yBAAD;AACI,QAAA,SAAS,EAAE,CAACI;AADhB,SAEQJ,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAuBH;;AAjEkC;;AAoEvC,MAAMM,eAAe,GAAGlB,wBAAwB,CAAC;AAC7Ce,EAAAA,oBAAoB,EAAEb,0BADuB;AAE7Cc,EAAAA,mBAAmB,EAAEb;AAFwB,CAAD,CAAhD;;AAKA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCnB,EAAAA,0BAA0B,EAAE,MAAMmB,QAAQ,CAACnB,2BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAKA,eAAeF,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions.js';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component'\n\nimport './shop.styles.scss';\n\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\n    //this whole section is moved to it's own reducer\n    // just an easier way to write state\n    // state = {\n    //     loading: true \n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync();\n        \n        //const { updateCollections } = this.props;\n        // const collectionRef = firestore.collection('collection');\n\n        // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n        //  collectionRef.get().then(snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n        // RXjs way :\n        // collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n\n        //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n        // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections));\n\n\n    }\n\n    render() {\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\n        return(\n            <div className='shop-page'>\n                <Route\n                    exact\n                    path={`${match.path}`} \n                    render={(props) => \n                        <CollectionsOverviewWithSpinner\n                            isLoading={!isCollectionFetching}\n                            {...props}\n                        />\n                    }\n                />\n                <Route\n                    path={`${match.path}/:collectionId`}\n                    render={(props) =>\n                        <CollectionPageWithSpinner\n                            isLoading={!isCollectionsLoaded}\n                            {...props}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    isCollectionFetching: selectIsCollectionFetching,\n    isCollectionsLoaded: selectIsCollectionsLoaded,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}