{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.fetchCollectionsSuccess,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.fetchCollectionsFailure,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collection');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapshot); //used to be:\n      //updateCollections(collectionsMap);\n\n      dispatch(fetchCollectionsSuccess(collectionsMap)); //this part is removed to since we aren't in a component\n      //this.setState({ loading: false });\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapShotToMap","fetchCollectionsStart","type","UPDATE_COLLECTIONS","fetchCollectionsSuccess","collectionsMap","payload","fetchCollectionsFailure","errorMessage","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAM;AACvCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADiB,CAAN,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEJ,eAAe,CAACM,uBADgC;AAEtDE,EAAAA,OAAO,EAAED;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAME,uBAAuB,GAAGC,YAAY,KAAK;AACpDN,EAAAA,IAAI,EAAEJ,eAAe,CAACS,uBAD8B;AAEpDD,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGZ,SAAS,CAACa,UAAV,CAAqB,YAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACT,qBAAqB,EAAtB,CAAR;AAEAU,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMV,cAAc,GAAGL,+BAA+B,CAACe,QAAD,CAAtD,CADiC,CAEjC;AACA;;AACAL,MAAAA,QAAQ,CAACN,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CAJiC,CAKjC;AACA;AACH,KAPD,EAQCW,KARD,CAQOC,KAAK,IAAIP,QAAQ,CAACH,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CARxB;AASH,GAbD;AAcH,CAfM","sourcesContent":["import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils'\n\nexport const fetchCollectionsStart = () =>({\n    type: ShopActionTypes.UPDATE_COLLECTIONS,\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.fetchCollectionsSuccess,\n    payload: collectionsMap,\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.fetchCollectionsFailure,\n    payload: errorMessage,\n})\n\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collection');\n        dispatch(fetchCollectionsStart());\n\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n            //used to be:\n            //updateCollections(collectionsMap);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n            //this part is removed to since we aren't in a component\n            //this.setState({ loading: false });\n        })\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n    }\n} "]},"metadata":{},"sourceType":"module"}