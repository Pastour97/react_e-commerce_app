{"ast":null,"code":"var _jsxFileName = \"/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart as _fetchCollectionsStart } from '../../redux/shop/shop.actions.js';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport Spinner from '../../components/Spinner/spinner.component.jsx';\nimport './shop.styles.scss';\n\nclass ShopPage extends React.Component {\n  //this whole section is moved to it's own reducer\n  // just an easier way to write state\n  // state = {\n  //     loading: true \n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const fetchCollectionsStart = this.props.fetchCollectionsStart;\n    fetchCollectionsStart(); //fetchCollectionsStartAsync();\n    //const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collection');\n    // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n    //  collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    // RXjs way :\n    // collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n    // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n  }\n\n  render() {\n    try {\n      const match = this.props.match;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"shop-page\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"\".concat(match.path),\n        component: CollectionsOverviewContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"\".concat(match.path, \"/:collectionId\"),\n        component: CollectionPageContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }\n      }));\n    } catch (_unused) {\n      return /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(_fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollectionsStart","CollectionsOverviewContainer","CollectionPageContainer","Spinner","ShopPage","Component","componentDidMount","props","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,qBAAqB,IAArBA,sBAAT,QAAsC,kCAAtC;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,OAAP,MAAoB,gDAApB;AAEA,OAAO,oBAAP;;AAMA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AAEnC;AACA;AACA;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAE;AAAA,UACPN,qBADO,GACmB,KAAKO,KADxB,CACPP,qBADO;AAEfA,IAAAA,qBAAqB,GAFN,CAGf;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGH;;AAEDQ,EAAAA,MAAM,GAAG;AAEL,QAAI;AAAA,YACQC,KADR,GACkB,KAAKF,KADvB,CACQE,KADR;AAEA,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AACI,QAAA,KAAK,MADT;AAEI,QAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAFR;AAGI,QAAA,SAAS,EAAET,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAMI,oBAAC,KAAD;AACI,QAAA,IAAI,YAAKQ,KAAK,CAACC,IAAX,mBADR;AAEI,QAAA,SAAS,EAAER,uBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAaH,KAfD,CAeE,gBAAM;AACJ,0BACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;AAEJ;;AAhEkC;;AAmEvC,MAAMS,kBAAkB,GAAGC,QAAQ,KAAK;AACpCZ,EAAAA,qBAAqB,EAAE,MAAMY,QAAQ,CAACZ,sBAAqB,EAAtB;AADD,CAAL,CAAnC;;AAKA,eAAeD,OAAO,CAAC,IAAD,EAAOY,kBAAP,CAAP,CAAkCP,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions.js';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport Spinner from '../../components/Spinner/spinner.component.jsx';\n\nimport './shop.styles.scss';\n\n\n\n\n\nclass ShopPage extends React.Component {\n\n    //this whole section is moved to it's own reducer\n    // just an easier way to write state\n    // state = {\n    //     loading: true \n    // };\n\n    // unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const { fetchCollectionsStart } = this.props;\n        fetchCollectionsStart();\n        //fetchCollectionsStartAsync();\n        \n        //const { updateCollections } = this.props;\n        // const collectionRef = firestore.collection('collection');\n\n        // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n        //  collectionRef.get().then(snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n        // RXjs way :\n        // collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n\n        //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n        // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections));\n\n\n    }\n\n    render() {\n\n        try {\n            const { match } = this.props;\n            return(\n                <div className='shop-page'>\n                    <Route\n                        exact\n                        path={`${match.path}`} \n                        component={CollectionsOverviewContainer}\n                    />\n                    <Route\n                        path={`${match.path}/:collectionId`}\n                        component={CollectionPageContainer}\n                    />\n                </div>\n            );\n        } catch {\n            return (\n                <Spinner />\n            )\n        }\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n})\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}