{"ast":null,"code":"var _jsxFileName = \"/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCollections as _updateCollections } from '../../redux/shop/shop.actions.js';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport './shop.styles.scss';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const updateCollections = this.props.updateCollections;\n    const collectionRef = firestore.collection('collection'); // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    }); // RXjs way :\n    // collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n    // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n  }\n\n  render() {\n    const match = this.props.match;\n    const loading = this.state.loading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(_updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapShotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","get","then","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAiB,IAAjBA,kBAAT,QAAkC,kCAAlC;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,oBAAP;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAGA,MAAMC,8BAA8B,GAAGL,WAAW,CAACC,mBAAD,CAAlD;AACA,MAAMK,yBAAyB,GAAGN,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMK,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAInCC,KAJmC,GAI3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAJ2B;AAAA,SAQnCC,uBARmC,GAQT,IARS;AAAA;;AAUnCC,EAAAA,iBAAiB,GAAE;AAAA,UACPb,iBADO,GACe,KAAKc,KADpB,CACPd,iBADO;AAEf,UAAMe,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,YAArB,CAAtB,CAFe,CAId;;AACAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AAClC,YAAMC,cAAc,GAAGf,+BAA+B,CAACc,QAAD,CAAtD;AACAnB,MAAAA,iBAAiB,CAACoB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAJA,EALc,CAWf;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGH;;AAEDW,EAAAA,MAAM,GAAG;AAAA,UACGC,KADH,GACa,KAAKT,KADlB,CACGS,KADH;AAAA,UAEGZ,OAFH,GAEe,KAAKD,KAFpB,CAEGC,OAFH;AAGL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,YAAKY,KAAK,CAACC,IAAX,CAFR;AAGI,MAAA,MAAM,EAAGV,KAAD,iBACJ,oBAAC,8BAAD;AACI,QAAA,SAAS,EAAEH;AADf,SAEQG,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAWI,oBAAC,KAAD;AACI,MAAA,IAAI,YAAKS,KAAK,CAACC,IAAX,mBADR;AAEI,MAAA,MAAM,EAAGV,KAAD,iBACJ,oBAAC,yBAAD;AACI,QAAA,SAAS,EAAEH;AADf,SAEQG,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAuBH;;AA/DkC;;AAkEvC,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpC1B,EAAAA,iBAAiB,EAAEoB,cAAc,IAC7BM,QAAQ,CAAC1B,kBAAiB,CAACoB,cAAD,CAAlB;AAFwB,CAAL,CAAnC;;AAMA,eAAerB,OAAO,CAAC,IAAD,EAAO0B,kBAAP,CAAP,CAAkCjB,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { updateCollections } from '../../redux/shop/shop.actions.js';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component'\n\nimport './shop.styles.scss';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\n\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\n\n    // just an easier way to write state\n    state = {\n        loading: true\n    };\n\n    unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n        const { updateCollections } = this.props;\n        const collectionRef = firestore.collection('collection');\n\n         // this way is the promise pattern way but the caveat with it is that we only get information once when the component gets mounted\n         collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n            updateCollections(collectionsMap);\n            this.setState({ loading: false });\n        });\n        \n        // RXjs way :\n        // collectionRef.onSnapshot(async snapshot => {\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //     updateCollections(collectionsMap);\n        //     this.setState({ loading: false });\n        // });\n\n\n        //Rest API way with fetch, it was hard and the data it provided us was really nested so we used the promise pattern instead XD\n        // fetch('https://firestore.googleapis.com/v1/projects/experimental-react/databases/(default)/documents/collection')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections));\n\n\n    }\n\n    render() {\n        const { match } = this.props;\n        const { loading } = this.state;\n        return(\n            <div className='shop-page'>\n                <Route\n                    exact\n                    path={`${match.path}`} \n                    render={(props) => \n                        <CollectionsOverviewWithSpinner\n                            isLoading={loading}\n                            {...props}\n                        />\n                    }\n                />\n                <Route\n                    path={`${match.path}/:collectionId`}\n                    render={(props) =>\n                        <CollectionPageWithSpinner\n                            isLoading={loading}\n                            {...props}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap =>\n        dispatch(updateCollections(collectionsMap))\n})\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}