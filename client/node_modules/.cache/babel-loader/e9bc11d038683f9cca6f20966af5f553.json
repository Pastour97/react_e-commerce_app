{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/shared/codes/react_e-com/Main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        collectionRef = firestore.collection('collection');\n        _context.next = 4;\n        return collectionRef.get();\n\n      case 4:\n        snapshot = _context.sent;\n        _context.next = 7;\n        return call(convertCollectionsSnapShotToMap, snapshot);\n\n      case 7:\n        collectionsMap = _context.sent;\n        _context.next = 10;\n        return put(fetchCollectionsSuccess(collectionsMap));\n\n      case 10:\n        _context.next = 16;\n        break;\n\n      case 12:\n        _context.prev = 12;\n        _context.t0 = _context[\"catch\"](0);\n        _context.next = 16;\n        return put(fetchCollectionsFailure(_context.t0.message));\n\n      case 16:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 12]]);\n}\n;\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Volumes/shared/codes/react_e-com/Main/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeEvery","call","put","firestore","convertCollectionsSnapShotToMap","fetchCollectionsFailure","fetchCollectionsSuccess","ShopActionTypes","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":";;oDAYiBA,qB;qDA0BAC,qB;;AAtCjB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAGA,OAAO,SAAUT,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOU,QAAAA,aAFP,GAEuBL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAFvB;AAAA;AAGkB,eAAMD,aAAa,CAACE,GAAd,EAAN;;AAHlB;AAGOC,QAAAA,QAHP;AAAA;AAIwB,eAAMV,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAV;;AAJxB;AAIOC,QAAAA,cAJP;AAAA;AAKC,eAAMV,GAAG,CAACI,uBAAuB,CAACM,cAAD,CAAxB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,eAAMV,GAAG,CAACG,uBAAuB,CAAC,YAAMQ,OAAP,CAAxB,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBN;AAGD,OAAO,SAAUd,qBAAV;AAAA;AAAA;AAAA;AAAA;AACH,eAAMC,SAAS,CACXO,eAAe,CAACO,uBADL,EAEXhB,qBAFW,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\n\nimport { \n    fetchCollectionsFailure,\n    fetchCollectionsSuccess,\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\n\nexport function* fetchCollectionsAsync() {\n    try{\n        const collectionRef = firestore.collection('collection');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionsSnapShotToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap));\n    }   catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n    \n        // the above code is exactly the same as this one which we wrote in our redux thunk\n        // collectionRef\n        //     .get()\n        //     .then(snapshot => {\n        //         const collectionsMap = convertCollectionsSnapShotToMap(snapshot);\n        //         //used to be:\n        //         //updateCollections(collectionsMap);\n        //         dispatch(fetchCollectionsSuccess(collectionsMap));\n        //         //this part is removed to since we aren't in a component\n        //         //this.setState({ loading: false });\n        //     })\n        //     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n};\n\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n}"]},"metadata":{},"sourceType":"module"}